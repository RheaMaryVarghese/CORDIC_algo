`timescale 1ns / 1ps

module cordic_parallel_tb;

    parameter WIDTH = 16;
    parameter STAGES = 16;

    // Inputs
    reg clk;
    reg rst;
    reg signed [WIDTH-1:0] x_in;
    reg signed [WIDTH-1:0] y_in;
    reg signed [WIDTH-1:0] angle_in;

    // Outputs
    wire signed [WIDTH-1:0] x_out;
    wire signed [WIDTH-1:0] y_out;

    // Declare real variables for floating-point calculations
    real cosine_val;
    real sine_val;

    // Instantiate the Unit Under Test (UUT)
    cordic_parallel #(WIDTH, STAGES) uut (
        .clk(clk),
        .rst(rst),
        .x_in(x_in),
        .y_in(y_in),
        .angle_in(angle_in),
        .x_out(x_out),
        .y_out(y_out)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 100MHz clock, 10ns period
    end

    // Function to convert fixed-point Q1.15 to floating-point
    function real fixed_to_float;
        input signed [WIDTH-1:0] fixed_point_value;
        begin
            // Divide the fixed-point value by 32768 (2^15) to get the float value
            fixed_to_float = fixed_point_value / 32768.0;
        end
    endfunction

    // Test vector generation
    initial begin
        // Initialize Inputs
        rst = 1;
        x_in = 16'h0001; // x = 0 (fixed-point)
        y_in = 16'h0000; // y = 1.0 in fixed-point (0x4000 is 1.0 in Q1.15 format)
        angle_in = 16'h0000; // 30 degrees in fixed-point representation
        
        // Wait for global reset to finish
        #20;
        rst = 0;
        
        // Wait for the pipeline to compute the values
        #160; // Give enough time for all stages to finish (STAGES * 10ns)

        // Convert the fixed-point results to floating-point
        cosine_val = fixed_to_float(x_out);
        sine_val = fixed_to_float(y_out);

        // Display the results (cosine and sine values as floating-point numbers)
        $display("cosine (float): %f, sine (float): %f", cosine_val, sine_val);
        
        // Finish simulation
        #20;
        $stop;
    end

endmodule
